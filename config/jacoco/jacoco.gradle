// JaCoCo(Java Code Coverage) 도구 설정
// 이 설정 파일은 Java 코드의 테스트 커버리지를 측정하고 보고하는 기능을 제공합니다.

// JaCoCo 버전 설정
// 실제 버전은 메인 build.gradle 또는 gradle.properties에 정의된 jacocoVersion 변수에서 가져옵니다.
jacoco {
    toolVersion = "${jacocoVersion}"
}

// JaCoCo 테스트 보고서 생성 설정
// 테스트 커버리지에 대한 상세 보고서를 생성하는 방법을 정의합니다.
jacocoTestReport {
    // test 태스크에 의존성 설정 - 테스트가 먼저 실행된 후에 보고서가 생성됩니다.
    dependsOn test

    // 보고서 출력 형식 설정
    reports {
        html.required = true  // HTML 보고서: 브라우저로 확인 가능한 형식 (활성화)
        xml.required = true   // XML 보고서: SonarQube 같은 외부 도구와 통합할 때 사용 (활성화)
        csv.required = false  // CSV 보고서: 스프레드시트 형식 (비활성화)
    }

    // QueryDSL에 의해 자동 생성되는 Q 클래스들을 커버리지 측정에서 제외
    // 자동 생성 코드는 개발자가 작성한 코드가 아니므로 테스트 커버리지 측정 대상에서 제외합니다.
    def Qdomains = []
    // QA부터 QZ로 시작하는 모든 클래스를 제외 목록에 추가
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    // 빌드 평가 후 클래스 디렉토리에서 제외할 파일을 설정
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: Qdomains)
        }))
    }
}

// JaCoCo 테스트 커버리지 검증 설정
// 정의된 규칙에 따라 코드 커버리지가 충분한지 검증합니다.
jacocoTestCoverageVerification {
    // 커버리지 위반 규칙 정의
    violationRules {
        // 기본 규칙 설정
        rule {
            // 검증 단위 설정: 'CLASS' 단위로 커버리지를 검사
            // 다른 옵션으로는 'METHOD', 'PACKAGE' 등이 있습니다.
            element = 'CLASS'

            // 커버리지 제한 설정
            limit {
                // 측정할 커버리지 유형: 'BRANCH'는 if/else, switch 등의 분기 커버리지를 측정
                // 다른 옵션으로는 'LINE'(라인 커버리지), 'INSTRUCTION'(바이트코드 명령어) 등이 있습니다.
                counter = 'BRANCH'

                // 측정 값 유형: 'COVEREDRATIO'는 커버된 부분의 비율을 측정
                // 다른 옵션으로는 'MISSED'(놓친 개수), 'COVERED'(커버된 개수) 등이 있습니다.
                value = 'COVEREDRATIO'

                // 최소 커버리지 비율: 0.0 (0%)
                // 현재는 매우 낮게 설정되어 있어 사실상 검증을 수행하지 않습니다.
                // 프로젝트가 성숙해감에 따라 점진적으로 높여가는 것이 좋습니다(예: 0.3, 0.5, 0.7).
                minimum = 00.0
            }

            // QueryDSL 클래스 제외 설정
            // jacocoTestReport와 동일한 이유로 자동 생성 코드를 검증에서 제외합니다.
            def Qdomains = []
            for (qPattern in "**/QA".."**/QZ") {
                Qdomains.add(qPattern + "*")
            }

            // 검증 제외 패턴 설정
            excludes = Qdomains
        }
    }
}